#Ansible-notes.yml
Anisble:
  - Infra provisioning:
      Deploy 50 VMS public/private cloud
      Provosion storage to all VM's
  - Configuration Mgmt:
      Setup network config on VM's
      Setup Cluster Config
      Config Web/db servers on 20 VM's
      Setup load balancing between vm's
      Setup monitoring components
      install and config backup clients on vm's
      update CMDB database with new VM info
  - Deployments:
  - Orchestration:
  - Continous Delivery/Continuous Deployments:

---
ansible variables:
  ansible_host:
  ansible_connection:
    - ssh
    - winrm
    - localhost

  ansible_user:
    - root (for linux)
    - administrator (for windows)

  ansible_port:
    - 22
    - 8080
  #(for linux)
  ansible_ssh_pass:
    - password
 #(for windows)
  ansible_password:
     #(for windows)
    - password

  ansible_private_key_file:
    - /root/anuragaws1.pem

---
sample_inventory_file:
 #hosts file
 [web]
172.31.44.35

 [web:vars]
 ansible_user=ec2-user
 ansible_private_key_file=/root/anuragaws1.pem

-----------#referring with alias -connection types -users- passwords ----

ansible-custom-inventory-file:
 #web ansible_host=172.31.44.35
 #To connect to localhost (default host=linux)
 localhost ansible_connection=localhost
 #web server and its alias and connection to it if it is linux host
 web ansible_host=server1.windows.com ansible_connection=ssh ansible_user=ec2-user ansible_ssh_pass=8da9s0aas90d
 #db server and its alias and connection to it if it is windows host
 db  ansible_host=server2.windows.com ansible_connection=winrm
 ---ping test- to ping web servers---
 ansible web -m ping

 #-- to ping hosts from and custom inventory file---
 ansible web -m ping -i hosts.txt
 #note:
 #create hosts.txt using vi hosts.txt
 #add the host details in hosts.txt and run the above command in the same directory
 #-i is used to provide file input

 #troubleshoot:
 #if we try to ping using ansible command it may not work
 #two ways to resolve this:
 #1) manually ping using ssh and add it to known hosts
 #2) (not recommended for production) uncomment #host_key_checking=false in  /etc/ansible/ansible.cfg

-----------Grouping of inventory files------------------------

ansble_inventoryfile-creating-groupOfGroups:
 # Sample Inventory File hosts.txt

 #DB_NODES
 sql_db1 ansible_host=sql01.xyz.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Lin$Pass
 sql_db2 ansible_host=sql02.xyz.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Lin$Pass

 #WEB_NODES
 web_node1 ansible_host=web01.xyz.com ansible_connection=winrm ansible_user=administrator ansible_password=Win$Pass
 web_node2 ansible_host=web02.xyz.com ansible_connection=winrm ansible_user=administrator ansible_password=Win$Pass
 web_node3 ansible_host=web03.xyz.com ansible_connection=winrm ansible_user=administrator ansible_password=Win$Pass

 [db_nodes]
 sql_db1
 sql_db2

 [web_nodes]
 web_node1
 web_node2
 web_node3

 [boston_nodes]
 sql_db1
 web_node1

 [dallas_nodes]
 sql_db2
 web_node2
 web_node3

 #group of groups
 [us_nodes:children]
 boston_nodes
 dallas_nodes
----

LEARN_YAML_SYNTAX:
    #https://www.linkedin.com/authwall?trk=bf&trkInfo=AQH_LizGBEADTQAAAW9HUW_I1_a4p9gF-8CgZipV3KUf45dvlmChBTZ7pZlXm0WUppcmsBtwUMGN0UQcIo_Pdl1IpTHwQ-2yfc59_303aOkWwB3KYA6Ho8A3tsMXIKmAaWgpRGc=&originalReferer=&sessionRedirect=https%3A%2F%2Fwww.linkedin.com%2Fin%2Fmumshad-mannambeth-29987029%2F
  #key_value_pair/map
  fruit: apple
  vegetable: carrot

  #arrays/List These are ordered collection
  Fruits:
    - Orange
    - Apples
    - Banana
  Vegetables:
    - Carrot
    - Tomato
    - Cabbage

  #Dictionaries/map These are unordered collection
    Banana:
      Calories: 105
      Fat: 0.4g
      Carbs: 27g

    Grapes:
      Calories: 62
      Fat: 0.5g
      Carbs: 27g

   #List containing Dictionaries    These are ordered
    Fruits:
      - Banana:
          Calories: 105
          Fat: 0.4g
          Carbs: 27g
      - Grapes:
          Calories: 62
          Fat: 0.5g
          Carbs: 27g
---
Playbooks_example1:
  ---
  name: Play 1
  hosts: localhost
  tasks:
    - name: execute comand date
      command: date

    - name: execute script on server
      script: test_script.sh

    - name: install httpd service
      yum:
        name: httpd
        state: present

    - name: Start web Server
      service:
        name: httpd
        state: started
---
modules:
  ansible-docs -l

  system: https://docs.ansible.com/ansible/latest/modules/list_of_system_modules.html
    - user:https://docs.ansible.com/ansible/latest/modules/user_module.html#user-module
    - group:https://docs.ansible.com/ansible/latest/modules/group_module.html#group-module
    - hostname
    - iptables:https://docs.ansible.com/ansible/latest/modules/iptables_module.html#iptables-module
    - lvg:https://docs.ansible.com/ansible/latest/modules/lvg_module.html#lvg-module
    - lvol
    - make
    - mount
    - ping
    - timezone
    - systemd
    - service
  commands:
    - command
    - expect
    - raw
    - script
    - shell
  file:
    - acl
    - archive
    - copy
    - file
    - find
    - lineinfile
    - replace
    - stat
    - template
    - unarchive
  database:
    - mysql
    - mssql
    - mongodb
    - postgresql
    - proxysql
    - vertica
  cloud:
    - amazon
    - azure
    - google
    - digital ocean
    - docker
    - rackspace
  windows:
    - win_copy
    - win_command
    - win_domain
    - win_file
    - win_iis_website
    - win_msg
    - win_msi
    - win_ping
    - win_path
    - win_robocopy
    - win_shell
    - win_user
    - win_regedit
    - win_service



 ansible ad-hoc commands:
  #To reboot nodes
    ansible webservers -a "/sbin/reboot" -f 10 --become
  ping:
    ansible all -m ping
  shell:
     ansible webservers -m shell -a 'uname -a'
  copy:
    ansible webservers -m copy -a "src=/etc/hosts dest=/tmp/hosts"
  file:
    ansible webservers -m file -a "dest=/srv/foo/b.txt mode=600 owner=mdehaan group=mdehaan"
  yum:
    ansible webservers -m yum -a "name=acme state=latest"
                                           #state=latest (to check installed version is latest)
                                           #state=present (to ensure whether installed)
                                           #state=absent (To ensure a package is not installed)


  service:
    ansible webservers -m service -a "name=httpd state=started"
                                           #state=started (Ensure a service is started on all webservers)
                                           #state=stopped (Ensure a service is stopped)
                                           #state=restarted (restart a service on all webservers)

  user:
    #notes will be added

  setup:
      ansible all -m setup

  #To dry run playboook
  ansible all -m ping -C


---
running playbooks:
  #To check the syntax of playbook:
  ansible-playbook playbook.yml --syntax-check
  #TO run playbook:
  ansible-playbook playbook.yml

  #To test Playbooks:
  ansible-playbook playbook.yml -C
  #or
  ansible-playbook playbook.yml --check

  #To run the playbook with custom inventory file provide the invetory file
  ansible-playbook playbook.yml -i hosts.txt
  #note: hosts.txt should be in same location where this command is being executed
  #else specify the path
---
playbook_example_2:
    #create a file playbook-pingtest.yml

  name: Test connectivity of nodes
  hosts: all
  tasks:
    - name: Ping Test
      ping:
  # run the playbook
  ansible-playbook playbook-pingtest.yml

  # run the playbook with custom inventory file provide the invetory file
  ansible-playbook playbook-pingtest.yml -i hosts.txt
  #note: hosts.txt should be in same location where this command is being executed
  #else specify the path
---
varaibles_in_playbooks:
 -
   name: Add dns Server to resolve.config
   hosts: localhost
   vars:
     dns_server: 10.1.250.10
   tasks:
      - name: Add dns Server to resolve.config
        lineinfile:
          lineinfile:
              path: /etc/resolv.conf
              line: 'nameserver {{dns_server}}'


---
 #Performance Improvements.. 1 ,
 - name: Perform some task
   hosts: webservers
   become: yes
   serial: 2
   #execute two servers at a time parallel operation
   #serial: 30%
   #percentage based
   #Executing in chunks
   #serial:
   #  - 1
   #  - 5
   #  - 30% #percentage based
   tasks:
     - name: Install web server
       package:
         name: httpd
         state: installed


 #Performance Improvements.. 2 : providedif we have enough forks completes
 #tasks at faster rates.
 - name: Perform some task
   hosts: webservers
   become: yes
   strategy: free
   #completes tasks at faster rate using max forks - meaning more parallel operaions
   tasks:
     - name: Install web server
       package:
         name: httpd
         state: installed

 #Performance Improvements.. 3 : Max failure rates safegaurd
 #tasks at faster rates.
 - name: Perform some task
   hosts: webservers
   become: yes
   #if we are runnning on large fleet of servers, we can't abort opearation if
   # there is any high failure rate, because of unkonwn reason
   max_fail_percentage: 5
   serial:
     - 10%
   #completes tasks at faster rate using max forks - meaning more parallel operations
   tasks:
     - name: Install web server
       package:
         name: httpd
         state: installed

#Performance Improvements.. 4:
  - Use local package servers
  - Use with_items for installing
  - Use control persist with OPENSSH, setting  a reasonable timeout.
  - pipelining
