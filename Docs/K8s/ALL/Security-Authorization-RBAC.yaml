 =======================================================================
          SECURITY - Authorization				
 =======================================================================    
Authorization:
  - RBAC (Role Based Authorization Control)
  - ABAC (Attributes Based Authorization Control)
  - NODE Authorization
  - Webhook Mode 

RBAC:
  #To create role based authentications: RBAC:
 ------------------deveolper-role.yaml--------------  
  apiVersion: rbac.autherization.k8s.io/v1
  kind: Role
  metadata:
    name: developer
  rules:
   - apiGroups: [ "" ]
      resources: [ "pods" ]
      verbs: [ "list", "get", "create", "update", "delete" ]
     # resourceNames: [ "blue", "green" ] #to give access to particular pods use this  resourceNames 
   - apiGroups: [ "" ]
      resources: [ "ConfigMaps" ]
      verbs: [ "list", "get", "create", "update", "delete" ]
----------------------------------------------------------
  kubectl create -f deveolper-role.yaml
  
  #To create role binding with users
 ------------------devuser-developer-role-binding.yaml--------------  
  apiVersion: rbac.autherization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: devuser-developer-binding
  roleRef:
    kind: Role
    name: developer
    apiGroup: rbac.autherization.k8s.io
  subjects:
   - kind: User
      name: devuser
      apiGroup:  rbac.autherization.k8s.io
   - apiGroups: [ "" ]
      resources: [ "pods" ]
      verbs: [ "list", "get", "create", "update", "delete" ]
 ----------------------------------------------------------
  kubectl create -f devuser-developer-role-binding.yaml
  
    #To view the roles
      kubectl get roles
    #To view rolebinding:
      kubectl get rolebindings  
    #To view detailed role:
      kubectl describe role developer 
    #To view detailed rolebinding
      kubectl describe rolebinding devuser-developer-binding

  CHECK ACCESS:
    #To check access (to self)
     kubectl auth can-i create deployments
     kubectl auth can-i delete nodes
    #To check access to (other users) 
     kubectl auth can-i create deployments --as dev-user
     kubectl auth can-i create pods --as dev-user
    #To check access to (other users)  in different namespaces
     kubectl auth can-i create deployments --as dev-user
     kubectl auth can-i create pods --as dev-user --namespace test   
 
  CLUSTER-SCOPE ROLES:
     #To see the api-resource in namespaces
      kubectl api-resorces --namspaced=true
     #To see the api-resource in cluster wide
      kubectl api-resorces --namspaced=false

     NAME-SPACE SCOPED:
         - pods , replicaSet, jobs, deployments, services, secrets,
         - roles, rolebindings, configMaps, PVC
     CLUSTER SCOPED:
         - nodes, PV, certificatessigningrequests, namespaces
         - clusterroles
         - clusterrolesbindings
 
 cluster roles:
   #To create  cluster role based authentications: RBAC:
   ------------------cluster-admin-role.yaml--------------  
    apiVersion: rbac.autherization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: cluster-administrator
    rules:
     - apiGroups: [ "" ]
        resources: [ "nodes" ]
        verbs: [ "list", "get", "create", "delete" ]

  ----------------------------------------------------------
   kubectl create -f  cluster-admin-role.yaml

  cluster roles bindings:
     #To create role binding with users
    ------------------cluster-admin-role-binding.yaml--------------  
      apiVersion: rbac.autherization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: cluster-admin-role-binding
      roleRef:
        kind: ClusterRole
        name: cluster-administrator
        apiGroup: rbac.autherization.k8s.io
      subjects:
       - kind: User
          name: cluster-admin
          apiGroup:  rbac.autherization.k8s.io       
    ----------------------------------------------------------
    kubectl create -f  cluster-admin-role-binding.yaml
