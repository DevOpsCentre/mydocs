====================== ====================== ====================== 
                       BASIC POD CREATION
====================== ====================== ====================== 
#To set the default Namespace (say dev)
  kubectl config set-context $(kubectl config current-context)  --namespace=dev
# YAML IN KUBERENETES BASIC
# EVERY YAML FILE SHOULD HAVE FOLLOWING
 ---
 apiVersion:
 kind:
 metadata:
 
 spec:

=========================================================
--- pod-definition.yml------and pod creation-----------------------
 apiVersion: v1
 kind: Pod 
 #here kind and api version can be 
                  #Pod  and apiVersion is v1
                  #Service and apiVersion is v1
                  #ReplicaSet and apiVersion is apps/v1
                  #Deployment and apiVersion is apps/v1
 metadata: 
    # this is the name assigned to pod ; 
    # if replicas are created additional hashcode will be added to same name
   name: myapp-pod
   #if we don't provide namespace tag here ,  then by default pods gets created in 'default' namespace
   #namespace: dev 
   labels:
     app: myapp
     type: front-end
    
 spec:
   containers:
     - name: nginx-controller
       image: nginx
       ports:
        - containerPort:80
   nodeSelector: #to schedule pods on particular node we use node selector with labels
     availableZone: 1a
     
------------commands to create pods--------------------------
#By default pods gets created in default namespace
#To create pod using above file in default namespace
 kubectl create -f pod-definition.yml
#note: here -f is used to provide file as input
#or
 kubectl run myapp-pod --image=nginx --generator=run-pod/v1

#To create pod in a specific namespace (say dev)
 kubectl create -f pod-definition.yml --namespace=dev

#To see list of pods with high level information
 kubectl get pods
 #or 
 kubectl get po

#To see list of pods in a specific namespace (say dev)
 kubectl get pods --namespace=dev
 
#To see list of pods with detailed information
 kubectl get pods -o wide

#To see detailed information of pods like labels, containers, created time, events etc.
 kubectl describe pods myapp-pod

#To remove the pod by name
 kubectl delete pods <pod-name>
 
#To remove all the pods 
 kubectl delete pods --all

# Delete pods and services with label name=myLabel.
 kubectl delete pods,services -l name=myLabel
 #ex: kubectl delete pods,services -l env=dev
 
 #To generate YAML file for Pod
  kubectl run <podname> \
  --image=<imagename> 
  --restart=Never \
  -o yaml \
  --dry-run > pod-def.yaml
 
 
# If we have multiple namespaces then we can use alias names in linux
   export ns=default #default namespace
   alias k='kubectl -n $ns' 
 #now you can use 
   k get po #to view pods in default namespaces 
 #to view pods in dev namespace
   export ns=dev #default namespace
   k get po #to view pods in dev namespaces  
 
 
#Edit a POD
#Remember, you CANNOT edit specifications of an existing POD other than the below.
#spec.containers[*].image
#spec.initContainers[*].image
#spec.activeDeadlineSeconds
#spec.tolerations
 #Run the kubectl edit pod <pod name> command.  This will open the pod specification in an editor (vi editor). 
 #Then edit the required properties. When you try to save it, you will be denied. 
 #This is because you are attempting to edit a field on the pod that is not editable.
 # A copy of the file with your changes is saved in a temporary location /tmp/pod093e2e.yaml


#Example using hostPath volumes
#If you create a node pool with three local SSDs, the host OS mounts the disks at 
#/mnt/disks/ssd0, /mnt/disks/ssd1 and /mnt/disks/ssd2. 
#Your Kubernetes containers access the disks using the hostPath parameter 
#in defined in your object's configuration file.

#This example Pod configuration file references a local SSD: /mnt/disks/ssd0:
----------------------------pod-def.yml---- with hosted volumes-----------
 apiVersion: v1
 kind: Pod
 metadata:
   name: "test-ssd"
 spec:
   containers:
   - name: "shell"
     image: "ubuntu:14.04"
     command: ["/bin/sh", "-c"]
     args: ["echo 'hello world' > /test-ssd/test.txt && sleep 1 && cat /test-ssd/test.txt"]
     volumeMounts:
     - mountPath: "/test-ssd/"
       name: "test-ssd"
   volumes:
   - name: "test-ssd"
     hostPath:
       path: "/mnt/disks/ssd0"
   nodeSelector:
     cloud.google.com/gke-local-ssd: "true"

---------------------------------------------------------------